Swing in Java - Simple Explanation

What is Swing?
Swing is a GUI (Graphical User Interface) toolkit in Java that helps create desktop applications with buttons, text fields, tables, and more. It is a part of Java's javax.swing package and is built on top of AWT (Abstract Window Toolkit).
Basic Features of Swing

    Lightweight – It doesn’t depend on the operating system's look and feel.
    Rich Components – Provides buttons, text fields, tables, checkboxes, etc.
    Platform Independent – Works the same on Windows, macOS, and Linux.
    Customizable Look – You can change colors, fonts, and styles.
    Event Handling – Supports user interactions (e.g., clicking a button).

Creating a Simple Swing Application

Let’s create a basic window with a button using Swing.

import javax.swing.*;  // Import Swing package

public class SwingExample {
    public static void main(String[] args) {
        // Create a window (frame)
        JFrame frame = new JFrame("My First Swing App");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Create a button
        JButton button = new JButton("Click Me!");

        // Add button to the frame
        frame.add(button);

        // Set layout and make frame visible
        frame.setLayout(null);
        button.setBounds(150, 100, 100, 40); // (x, y, width, height)
        frame.setVisible(true);
    }
}

Explanation of Code

    JFrame → Creates a window.
    JButton → Creates a button.
    setSize(400, 300) → Sets window size.
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) → Closes the app when the window is closed.
    frame.add(button) → Adds the button to the window.
    setLayout(null) → Positions components manually.
    setBounds(x, y, width, height) → Sets button position and size.
    setVisible(true) → Displays the window.

Common Swing Components
Component	Description
JFrame	Main window
JButton	Clickable button
JLabel	Displays text
JTextField	Input field for text
JTextArea	Multi-line text field
JCheckBox	Checkbox selection
JRadioButton	Selectable radio button
JTable	Displays data in a table format
How to Handle Button Clicks?

To perform an action when the button is clicked, we use ActionListener.

import javax.swing.*;
import java.awt.event.*;

public class SwingButtonExample {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Button Click Example");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JButton button = new JButton("Click Me!");
        button.setBounds(150, 100, 100, 40);
        
        // Add action listener for button click
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(frame, "Button Clicked!");
            }
        });

        frame.add(button);
        frame.setLayout(null);
        frame.setVisible(true);
    }
}

Explanation:

    ActionListener detects button clicks.
    JOptionPane.showMessageDialog() displays a pop-up message when clicked.

Summary

    Swing is used to create desktop applications in Java.
    It provides components like buttons, text fields, and tables to build interfaces.
    Swing is lightweight, customizable, and platform-independent.
    Events (like button clicks) can be handled using ActionListener.

---------------------------------------------------------------------------------------------------
Here’s a simple Swing application where the user can enter two numbers, click a button, and see the result.
Code to Add Two Numbers Using Swing

import javax.swing.*;
import java.awt.event.*;

public class SwingAddition {
    public static void main(String[] args) {
        // Create a frame (window)
        JFrame frame = new JFrame("Addition App");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(null);

        // Create input fields
        JTextField num1Field = new JTextField();
        JTextField num2Field = new JTextField();
        num1Field.setBounds(50, 50, 100, 30);
        num2Field.setBounds(200, 50, 100, 30);

        // Create a button
        JButton addButton = new JButton("Add");
        addButton.setBounds(150, 100, 80, 30);

        // Create a label to display the result
        JLabel resultLabel = new JLabel("Result: ");
        resultLabel.setBounds(150, 150, 200, 30);

        // Add action listener to button
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    // Get numbers from text fields
                    int num1 = Integer.parseInt(num1Field.getText());
                    int num2 = Integer.parseInt(num2Field.getText());
                    int sum = num1 + num2;

                    // Display the result
                    resultLabel.setText("Result: " + sum);
                } catch (NumberFormatException ex) {
                    resultLabel.setText("Enter valid numbers!");
                }
            }
        });

        // Add components to the frame
        frame.add(num1Field);
        frame.add(num2Field);
        frame.add(addButton);
        frame.add(resultLabel);

        // Make the frame visible
        frame.setVisible(true);
    }
}

Explanation of Code

    JTextField → Used for input fields.
    JButton → Button to perform addition.
    JLabel → Displays the result.
    addActionListener() → Detects button clicks and adds numbers.
    Integer.parseInt() → Converts input text to numbers.
    Exception Handling → Prevents errors if the user enters invalid input.

How It Works

    Enter two numbers in the text fields.
    Click the "Add" button.
    The sum is displayed below the button.
-------------------------------------------------------------------------------------------------

package swing;
import javax.swing.*;  // Import Swing package
import javax.swing.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Two {
    public static void main(String[] args) {
        // Create the main JFrame
        JFrame frame = new JFrame("CRUD Example");
        frame.setSize(600, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(null);

        // Table to display data
        String[] columns = {"ID", "Name", "Age"};
        DefaultTableModel tableModel = new DefaultTableModel(columns, 0);
        JTable table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBounds(50, 20, 500, 150);
        frame.add(scrollPane);

        // Input fields and labels
        JLabel idLabel = new JLabel("ID:");
        idLabel.setBounds(50, 200, 50, 30);
        frame.add(idLabel);

        JTextField idField = new JTextField();
        idField.setBounds(100, 200, 100, 30);
        frame.add(idField);

        JLabel nameLabel = new JLabel("Name:");
        nameLabel.setBounds(220, 200, 50, 30);
        frame.add(nameLabel);

        JTextField nameField = new JTextField();
        nameField.setBounds(280, 200, 100, 30);
        frame.add(nameField);

        JLabel ageLabel = new JLabel("Age:");
        ageLabel.setBounds(400, 200, 50, 30);
        frame.add(ageLabel);

        JTextField ageField = new JTextField();
        ageField.setBounds(450, 200, 100, 30);
        frame.add(ageField);

        // CRUD Buttons
        JButton addButton = new JButton("Add");
        addButton.setBounds(50, 250, 100, 30);
        frame.add(addButton);

        JButton updateButton = new JButton("Update");
        updateButton.setBounds(160, 250, 100, 30);
        frame.add(updateButton);

        JButton deleteButton = new JButton("Delete");
        deleteButton.setBounds(270, 250, 100, 30);
        frame.add(deleteButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(380, 250, 100, 30);
        frame.add(clearButton);

        // Add Button Action
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String id = idField.getText();
                String name = nameField.getText();
                String age = ageField.getText();

                if (id.isEmpty() || name.isEmpty() || age.isEmpty()) {
                    JOptionPane.showMessageDialog(frame, "Please fill all fields!");
                } else {
                    tableModel.addRow(new Object[]{id, name, age}); // Add new row to table
                    clearFields();
                }
            }

            private void clearFields() {
                idField.setText("");
                nameField.setText("");
                ageField.setText("");
            }
        });

        // Update Button Action
        updateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedRow = table.getSelectedRow();
                if (selectedRow == -1) {
                    JOptionPane.showMessageDialog(frame, "Please select a row to update!");
                } else {
                    tableModel.setValueAt(idField.getText(), selectedRow, 0);
                    tableModel.setValueAt(nameField.getText(), selectedRow, 1);
                    tableModel.setValueAt(ageField.getText(), selectedRow, 2);
                    clearFields();
                }
            }

            private void clearFields() {
                idField.setText("");
                nameField.setText("");
                ageField.setText("");
            }
        });

        // Delete Button Action
        deleteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedRow = table.getSelectedRow();
                if (selectedRow == -1) {
                    JOptionPane.showMessageDialog(frame, "Please select a row to delete!");
                } else {
                    tableModel.removeRow(selectedRow); // Remove selected row from table
                }
            }
        });

        // Clear Button Action
        clearButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                idField.setText("");
                nameField.setText("");
                ageField.setText("");
            }
        });

        // Table Row Click Listener
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                int selectedRow = table.getSelectedRow();
                idField.setText(tableModel.getValueAt(selectedRow, 0).toString());
                nameField.setText(tableModel.getValueAt(selectedRow, 1).toString());
                ageField.setText(tableModel.getValueAt(selectedRow, 2).toString());
            }
        });

        // Show the frame
        frame.setVisible(true);
    }
}----------------------------------------------------------------------
