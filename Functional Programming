
Functional Programming in
Java (Simple Explanation)

Functional programming is a way of writing code where you focus on what to do rather than how to do it. Instead of using loops and changing variables, you use functions to process data.
1️⃣ Lambda Expressions (Short Functions)

Instead of writing a full function, we can write a shorter version using lambda expressions.

🔹 Without Lambda (Old Way)
We create a separate method:

public class Main {
    public static int square(int n) {
        return n * n;
    }

    public static void main(String[] args) {
        System.out.println(square(5));  // Output: 25
    }
}

🔹 With Lambda (New Way)
No need for a separate method:

public class Main {
    public static void main(String[] args) {
        java.util.function.Function<Integer, Integer> square = n -> n * n;
        System.out.println(square.apply(5));  // Output: 25
    }
}

✅ Shorter & Easier to Read!
2️⃣ Streams (Processing Data Easily)

Streams help us work with lists without loops.

🔹 Without Streams (Loop Way)

import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
        int sum = 0;
        
        for (int num : numbers) {
            if (num % 2 == 0) {  // Even numbers only
                sum += num;
            }
        }

        System.out.println(sum);  // Output: 6 (2 + 4)
    }
}

🔹 With Streams (Functional Way)

import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);

        int sum = numbers.stream()
                         .filter(n -> n % 2 == 0)  // Keep even numbers
                         .mapToInt(n -> n)         // Convert to int
                         .sum();                   // Add all numbers

        System.out.println(sum);  // Output: 6 (2 + 4)
    }
}

✅ Less Code & More Readable!
3️⃣ Functional Interfaces (Passing Functions Like Data)

A functional interface has one function, and we can pass lambda expressions into it.

🔹 Example: Passing a Function

import java.util.function.Function;

public class Main {
    public static void main(String[] args) {
        Function<String, Integer> lengthFinder = str -> str.length();

        System.out.println(lengthFinder.apply("Hello"));  // Output: 5
    }
}

✅ Pass functions like variables!
4️⃣ Method References (:: Operator)

Instead of writing a lambda expression, we can directly use an existing method.

🔹 Without Method Reference

import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie");

        names.forEach(name -> System.out.println(name));
    }
}

🔹 With Method Reference (:: Operator)

import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie");

        names.forEach(System.out::println);
    }
}

✅ Even shorter & cleaner!
Why Use Functional Programming?

✔ Less Code – Short & clear
✔ Easy to Read – Focuses on what to do, not how
✔ Better Performance – Supports parallel execution
✔ Fewer Bugs – Avoids changing variables
