Sure! Loops in Java are used to repeat a block of code multiple times until a condition is met. Think of loops as a way to say, "Do this action again and again until I tell you to stop."

Types of Loops in Java
for Loop
Use this when you know how many times you want to repeat something.
Example:
java
Copy
Edit
for (int i = 1; i <= 5; i++) {
    System.out.println("Count: " + i);
}
Explanation:
Start with i = 1.
Check if i <= 5. If true, print Count: i.
Increment i by 1 (i++), and repeat until i > 5.
while Loop
Use this when you donâ€™t know how many times the loop will run, but you have a condition to check.
Example:
java
Copy
Edit
int i = 1;
while (i <= 5) {
    System.out.println("Count: " + i);
    i++;
}
Explanation:
Start with i = 1.
Check if i <= 5. If true, print Count: i.
Increment i by 1 and repeat until i > 5.
do-while Loop
Use this when you want the code to run at least once, even if the condition is false.
Example:
java
Copy
Edit
int i = 1;
do {
    System.out.println("Count: " + i);
    i++;
} while (i <= 5);
Explanation:
Print Count: i and increment i by 1.
After running the code, check if i <= 5 and repeat if true.
Real-Life Analogy
Imagine you're eating cookies:

for loop: You have 5 cookies. You eat each cookie one by one and stop after the 5th.
while loop: You keep eating cookies as long as there are cookies left on the plate.
do-while loop: You eat one cookie first, then check if there are more to continue eating.

  ----------------------------------------------------------------
Bitwise operators 


e operators in Java with their explanations and examples:
1. Bitwise AND (&)

    Performs a binary AND operation. The result is 1 only if both corresponding bits are 1.

Example:

int a = 5; // 0101 in binary
int b = 3; // 0011 in binary
int result = a & b; // 0001 (1 in decimal)
System.out.println(result); // Output: 1

2. Bitwise OR (|)

    Performs a binary OR operation. The result is 1 if at least one of the corresponding bits is 1.

Example:

int a = 5; // 0101 in binary
int b = 3; // 0011 in binary
int result = a | b; // 0111 (7 in decimal)
System.out.println(result); // Output: 7

3. Bitwise XOR (^)

    Performs a binary XOR operation. The result is 1 if the corresponding bits are different.

Example:

int a = 5; // 0101 in binary
int b = 3; // 0011 in binary
int result = a ^ b; // 0110 (6 in decimal)
System.out.println(result); // Output: 6

4. Bitwise Complement (~)

    Inverts all the bits of a number (1 becomes 0, and 0 becomes 1).

Example:

int a = 5; // 0101 in binary
int result = ~a; // 1010 (2's complement: -6 in decimal)
System.out.println(result); // Output: -6


Left Shift Shortcut

    Left shift (<<) is equivalent to multiplying a number by 2n2n (where nn is the number of positions shifted).

Shortcut: Instead of:

int result = num << n; // num * 2^n

You can simply use:

int result = num * (1 << n);

Example:

int num = 3; // 0011 in binary
int n = 2;   // Shift left by 2 positions
int result = num << n; // Same as 3 * 2^2 = 12
System.out.println(result); // Output: 12

Right Shift Shortcut

    Right shift (>>) is equivalent to dividing a number by 2n2n (for positive numbers).

Shortcut: Instead of:

int result = num >> n; // num / 2^n

You can simply use:

int result = num / (1 << n);

Example:

int num = 16; // 10000 in binary
int n = 2;    // Shift right by 2 positions
int result = num >> n; // Same as 16 / 2^2 = 4
System.out.println(result); // Output: 4


---------------------------------------------------------------------------------------
