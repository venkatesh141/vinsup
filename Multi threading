Thread and Multithreading in Java (Simple Explanation)
What is a Thread?

A thread is a lightweight process that runs independently within a program. Java uses threads to perform multiple tasks at the same time.
What is Multithreading?

Multithreading is the ability of a program to run multiple threads at the same time. It helps in:
‚úÖ Running tasks faster
‚úÖ Better CPU utilization
‚úÖ Performing multiple tasks at once
Creating a Thread in Java

In Java, we can create a thread in two ways:
1Ô∏è‚É£ By extending the Thread class
2Ô∏è‚É£ By implementing the Runnable interface
1Ô∏è‚É£ Using the Thread Class

class MyThread extends Thread {
    public void run() {
        // Code that runs in the thread
        for (int i = 1; i <= 5; i++) {
            System.out.println("Thread is running: " + i);
            try {
                Thread.sleep(1000); // Pause for 1 second
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class ThreadExample {
    public static void main(String[] args) {
        MyThread t1 = new MyThread(); // Create thread object
        t1.start(); // Start the thread
    }
}

‚úÖ The run() method contains the logic that runs in the thread.
‚úÖ The start() method starts the thread and runs run().
‚úÖ Thread.sleep(1000) pauses the thread for 1 second.
2Ô∏è‚É£ Using the Runnable Interface

class MyRunnable implements Runnable {
    public void run() {
        for (int i = 1; i <= 5; i++) {
            System.out.println("Runnable Thread is running: " + i);
            try {
                Thread.sleep(1000); // Pause for 1 second
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class RunnableExample {
    public static void main(String[] args) {
        MyRunnable myRunnable = new MyRunnable(); // Create runnable object
        Thread t1 = new Thread(myRunnable); // Create thread object
        t1.start(); // Start the thread
    }
}

‚úÖ Runnable is used when a class already extends another class (since Java does not support multiple inheritance).
‚úÖ We create a Thread object and pass the Runnable object to it.
Multithreading Example

class Task1 extends Thread {
    public void run() {
        for (int i = 1; i <= 5; i++) {
            System.out.println("Task 1 is running: " + i);
        }
    }
}

class Task2 extends Thread {
    public void run() {
        for (int i = 1; i <= 5; i++) {
            System.out.println("Task 2 is running: " + i);
        }
    }
}

public class MultiThreadExample {
    public static void main(String[] args) {
        Task1 t1 = new Task1();
        Task2 t2 = new Task2();
        
        t1.start(); // Start first thread
        t2.start(); // Start second thread
    }
}

‚úÖ Both threads run simultaneously.
‚úÖ Order of execution is not fixed (depends on CPU scheduling).
Key Points

üîπ start() method starts a thread.
üîπ run() method contains the code that runs in a thread.
üîπ Thread.sleep(ms) makes a thread wait for the given milliseconds.
üîπ Multiple threads run at the same time, improving performance.

Would you like more examples or explanations? üòä

