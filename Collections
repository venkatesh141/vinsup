Collections in Java (Simplified Explanation)

The Collections Framework in Java provides ready-made data structures (like lists, sets, maps) to store and manipulate data efficiently.
1. Why Use Collections?

‚òë Arrays have a fixed size ‚Üí Collections can grow dynamically.
‚òë Arrays have less functionality ‚Üí Collections provide sorting, searching, etc.
‚òë Collections improve performance by using efficient algorithms.
2. Types of Collections in Java

Java provides different types of collections under the java.util package.
The main interfaces in the Java Collections Framework are:
Interface	Type	Example
List	Ordered, allows duplicates	ArrayList, LinkedList, Vector
Set	No duplicates allowed	HashSet, LinkedHashSet, TreeSet
Queue	Follows FIFO (First In First Out)	PriorityQueue, LinkedList (Queue mode)
Map	Stores key-value pairs (No duplicate keys)	HashMap, LinkedHashMap, TreeMap, Hashtable
3. Common Collection Classes (with Examples)
A. List (Ordered, Duplicates Allowed)

1Ô∏è‚É£ ArrayList ‚Äì Fast for searching, slow for insert/delete in the middle
2Ô∏è‚É£ LinkedList ‚Äì Fast for insert/delete, slow for searching
3Ô∏è‚É£ Vector ‚Äì Like ArrayList but thread-safe (used in multi-threading)
Example:

import java.util.*;

public class ListExample {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("Apple");
        list.add("Banana");
        list.add("Apple"); // Allows duplicates

        System.out.println(list); // Output: [Apple, Banana, Apple]
    }
}

B. Set (No Duplicates, Unordered)

1Ô∏è‚É£ HashSet ‚Äì Fast, but unordered
2Ô∏è‚É£ LinkedHashSet ‚Äì Maintains insertion order
3Ô∏è‚É£ TreeSet ‚Äì Sorted set (ascending order)
Example:

import java.util.*;

public class SetExample {
    public static void main(String[] args) {
        Set<String> set = new HashSet<>();
        set.add("Apple");
        set.add("Banana");
        set.add("Apple"); // Duplicate, won't be added

        System.out.println(set); // Output: [Apple, Banana] (unordered)
    }
}

C. Queue (FIFO - First In, First Out)

1Ô∏è‚É£ LinkedList (Queue mode) ‚Äì Implements queue behavior
2Ô∏è‚É£ PriorityQueue ‚Äì Elements ordered based on priority
Example:

import java.util.*;

public class QueueExample {
    public static void main(String[] args) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(10);
        queue.add(20);
        queue.add(30);

        System.out.println(queue.poll()); // Removes 10 (First element)
        System.out.println(queue);        // Output: [20, 30]
    }
}

D. Map (Key-Value Pair, No Duplicate Keys)

1Ô∏è‚É£ HashMap ‚Äì Fast, unordered
2Ô∏è‚É£ LinkedHashMap ‚Äì Maintains insertion order
3Ô∏è‚É£ TreeMap ‚Äì Sorted by keys
4Ô∏è‚É£ Hashtable ‚Äì Like HashMap but thread-safe
Example:

import java.util.*;

public class MapExample {
    public static void main(String[] args) {
        Map<Integer, String> map = new HashMap<>();
        map.put(1, "Apple");
        map.put(2, "Banana");
        map.put(1, "Mango"); // Replaces Apple (same key)

        System.out.println(map); // Output: {1=Mango, 2=Banana}
    }
}

4. Sorting Collections

Java provides Collections.sort() to sort Lists.
Example:

import java.util.*;

public class SortingExample {
    public static void main(String[] args) {
        List<Integer> list = new ArrayList<>(Arrays.asList(5, 2, 8, 1));
        Collections.sort(list); // Sorts in ascending order

        System.out.println(list); // Output: [1, 2, 5, 8]
    }
}

5. When to Use Which Collection?
Scenario	Best Collection
Need fast searching	HashMap or HashSet
Need sorted order	TreeSet or TreeMap
Need fast insertion/removal	LinkedList
Need to store unique elements	Set
Need key-value pairs	Map
Need synchronized (thread-safe) collection	Vector or Hashtable
Summary

    ‚úÖ List ‚Üí Ordered, allows duplicates (ArrayList, LinkedList)
    ‚úÖ Set ‚Üí No duplicates, unordered (HashSet, TreeSet)
    ‚úÖ Queue ‚Üí Follows FIFO (LinkedList, PriorityQueue)
    ‚úÖ Map ‚Üí Key-value pairs (HashMap, TreeMap)

Do you want more examples on a specific collection type? üöÄ
You said:
give more function on array list 
ChatGPT said:
ArrayList Functions in Java (With Examples)

ArrayList is a part of Java's Collections Framework and provides dynamic arrays with many useful functions.
1. Basic Operations on ArrayList

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();

        // 1. add() - Add elements to the list
        list.add("Apple");
        list.add("Banana");
        list.add("Mango");

        System.out.println(list); // Output: [Apple, Banana, Mango]
    }
}

2. Access and Modify Elements

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>(Arrays.asList("Apple", "Banana", "Mango"));

        // 2. get() - Access an element by index
        System.out.println(list.get(1)); // Output: Banana

        // 3. set() - Modify an element
        list.set(1, "Orange"); 
        System.out.println(list); // Output: [Apple, Orange, Mango]
    }
}

3. Remove Elements

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>(Arrays.asList("Apple", "Banana", "Mango", "Grapes"));

        // 4. remove(index) - Remove by index
        list.remove(2); 
        System.out.println(list); // Output: [Apple, Banana, Grapes]

        // 5. remove(Object) - Remove by value
        list.remove("Banana");
        System.out.println(list); // Output: [Apple, Grapes]
    }
}

4. Check Size and Clear List

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>(Arrays.asList("Apple", "Banana"));

        // 6. size() - Get the number of elements
        System.out.println(list.size()); // Output: 2

        // 7. clear() - Remove all elements
        list.clear();
        System.out.println(list); // Output: []
    }
}

5. Check if List is Empty

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();

        // 8. isEmpty() - Check if the list is empty
        System.out.println(list.isEmpty()); // Output: true

        list.add("Apple");
        System.out.println(list.isEmpty()); // Output: false
    }
}

6. Check if List Contains an Element

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>(Arrays.asList("Apple", "Banana", "Mango"));

        // 9. contains() - Check if an element exists
        System.out.println(list.contains("Banana")); // Output: true
        System.out.println(list.contains("Grapes")); // Output: false
    }
}

7. Convert ArrayList to Array

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>(Arrays.asList("Apple", "Banana", "Mango"));

        // 10. toArray() - Convert to array
        String[] array = list.toArray(new String[0]);

        System.out.println(Arrays.toString(array)); // Output: [Apple, Banana, Mango]
    }
}

8. Iterate Over ArrayList

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>(Arrays.asList("Apple", "Banana", "Mango"));

        // 11. Using a for-each loop
        for (String fruit : list) {
            System.out.println(fruit);
        }

        // 12. Using an Iterator
        Iterator<String> it = list.iterator();
        while (it.hasNext()) {
            System.out.println(it.next());
        }
    }
}

9. Sort an ArrayList

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(5, 1, 8, 3));

        // 13. sort() - Sort in ascending order
        Collections.sort(list);
        System.out.println(list); // Output: [1, 3, 5, 8]

        // 14. sort() - Sort in descending order
        Collections.sort(list, Collections.reverseOrder());
        System.out.println(list); // Output: [8, 5, 3, 1]
    }
}

10. Copy Elements from One List to Another

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<String> list1 = new ArrayList<>(Arrays.asList("A", "B", "C"));
        ArrayList<String> list2 = new ArrayList<>();

        // 15. addAll() - Copy elements from one list to another
        list2.addAll(list1);
        System.out.println(list2); // Output: [A, B, C]
    }
}

11. Retain Common Elements (Intersection)

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<String> list1 = new ArrayList<>(Arrays.asList("Apple", "Banana", "Mango"));
        ArrayList<String> list2 = new ArrayList<>(Arrays.asList("Banana", "Grapes", "Mango"));

        // 16. retainAll() - Keep only common elements
        list1.retainAll(list2);
        System.out.println(list1); // Output: [Banana, Mango]
    }
}

12. Remove All Elements from Another List

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<String> list1 = new ArrayList<>(Arrays.asList("Apple", "Banana", "Mango"));
        ArrayList<String> list2 = new ArrayList<>(Arrays.asList("Banana", "Mango"));

        // 17. removeAll() - Remove elements that exist in another list
        list1.removeAll(list2);
        System.out.println(list1); // Output: [Apple]
    }
}

13. Shuffle Elements in Random Order

import java.util.*;

public class ArrayListExample {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));

        // 18. shuffle() - Randomly shuffle elements
        Collections.shuffle(list);
        System.out.println(list);
    }
}

Summary of ArrayList Methods
Method	Description
add(element), add(index, element)	Adds an element
get(index)	Gets element at index
set(index, value)	Updates value at index
remove(index), remove(Object)	Removes element
size()	Returns size of list
clear()	Removes all elements
isEmpty()	Checks if list is empty
contains(element)	Checks if an element exists
sort()	Sorts list
toArray()	Converts list to array
retainAll(list)	Keeps only common elements
removeAll(list)	Removes elements in another list
shuffle()	Randomly shuffles elements

Want more details on any method? üöÄ

