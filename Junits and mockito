JUnit:
JUnit is a framework in Java used for writing and running tests for your code. Imagine you're building a house and want to make sure everything works—JUnit is like a checklist 
that helps you test different parts of your house (your code) to make sure they function correctly.

Unit Testing: It focuses on testing small parts (units) of your code, like a single method or class.
JUnit provides tools to easily create tests and check if your code works as expected.
For example, you might have a method that adds two numbers, and you want to make sure it adds them correctly. JUnit helps you create a test that automatically checks this.

Mockito:
Mockito is a tool that helps you mock (fake) parts of your code that are difficult to test or interact with. It’s often used with JUnit to test certain pieces of code without 
needing the actual resources, like databases or web servers.

If you have a method that calls an external service (like sending an email), you don’t want to actually send an email during tests. Mockito lets you fake this behavior (mock the service), 
so the test runs quickly and doesn’t do anything unwanted (like sending real emails).
In simple terms, Mockito helps you create "mock" versions of objects to test the parts of your code that interact with them, without having to deal with real external systems.

Example:
JUnit: You want to test a calculateSum() method. JUnit helps you write the test.
Mockito: If calculateSum() relies on getting data from a database, you use Mockito to mock the database so the test doesn't depend on an actual database.
In short:

JUnit = framework for writing tests
Mockito = tool for faking parts of your code to make testing easier
----------------------------------------------------------------------------------------------------------------
