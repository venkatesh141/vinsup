Strings in Java
In Java, a String is a sequence of characters. The String class is part of java.lang package and is immutable, meaning once a String object is created, it cannot be changed.

1Ô∏è‚É£ Creating Strings in Java
There are two ways to create strings:

1. Using String Literal (Stored in String Pool)
java
Copy
Edit
String s1 = "Hello";  // String literal
Stored in String Pool inside the Heap.
If the same string exists, it reuses the existing object.
2. Using new Keyword (Stored in Heap)
java
Copy
Edit
String s2 = new String("Hello");  // Creates a new object
Stored in Heap Memory (not in the String Pool).
Even if the same string exists, it creates a new object.
2Ô∏è‚É£ String Methods
Java provides many built-in methods for String. Some important ones:

Method	Description	Example
length()	Returns length of string	"Hello".length() ‚Üí 5
charAt(index)	Returns character at given index	"Java".charAt(2) ‚Üí 'v'
concat(str)	Joins two strings	"Hello".concat(" World") ‚Üí "Hello World"
equals(str)	Compares two strings (case-sensitive)	"Java".equals("java") ‚Üí false
equalsIgnoreCase(str)	Compares without case sensitivity	"Java".equalsIgnoreCase("java") ‚Üí true
toUpperCase()	Converts to uppercase	"hello".toUpperCase() ‚Üí "HELLO"
toLowerCase()	Converts to lowercase	"HELLO".toLowerCase() ‚Üí "hello"
trim()	Removes leading & trailing spaces	" Hello ".trim() ‚Üí "Hello"
substring(start, end)	Extracts substring from index start to end-1	"Hello".substring(1, 4) ‚Üí "ell"
replace(old, new)	Replaces characters	"Java".replace('a', 'o') ‚Üí "Jovo"
split(delimiter)	Splits string into array based on delimiter	"a,b,c".split(",") ‚Üí ["a", "b", "c"]
contains(str)	Checks if string contains another string	"Hello".contains("ll") ‚Üí true
3Ô∏è‚É£ String Immutability
Since String objects are immutable:

java
Copy
Edit
String s = "Hello";
s.concat(" World"); // New string is created but not assigned
System.out.println(s); // Output: Hello
If we want to update the value, we need to assign it:

java
Copy
Edit
s = s.concat(" World"); 
System.out.println(s); // Output: Hello World
4Ô∏è‚É£ Comparing Strings
Using == (Reference Comparison)
java
Copy
Edit
String s1 = "Java";
String s2 = "Java";
System.out.println(s1 == s2); // true (Same String Pool reference)
java
Copy
Edit
String s3 = new String("Java");
System.out.println(s1 == s3); // false (Different objects in Heap)
Using .equals() (Content Comparison)
java
Copy
Edit
System.out.println(s1.equals(s3)); // true (Same content)
5Ô∏è‚É£ Mutable Strings: StringBuilder & StringBuffer
Since String is immutable, Java provides mutable alternatives:

StringBuilder (Faster, Not Thread-safe)
StringBuffer (Thread-safe)
Example using StringBuilder:

java
Copy
Edit
StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");
System.out.println(sb); // Output: Hello World
6Ô∏è‚É£ Converting Other Data Types to String
Using String.valueOf()
java
Copy
Edit
int num = 100;
String str = String.valueOf(num); // "100"
Using Integer.toString()
java
Copy
Edit
int num = 50;
String str = Integer.toString(num); // "50"
Summary
‚úî String is immutable
‚úî Use == for reference comparison, .equals() for content comparison
‚úî Use StringBuilder or StringBuffer for mutable strings

Let me know if you need more explanations! üöÄ







